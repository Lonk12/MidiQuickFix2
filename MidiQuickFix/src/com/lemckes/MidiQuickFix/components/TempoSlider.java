/**************************************************************
 *
 *   MidiQuickFix - A Simple Midi file editor and player
 *
 *   Copyright (C) 2004-2021 John Lemcke
 *   jostle@users.sourceforge.net
 *
 *   This program is free software; you can redistribute it
 *   and/or modify it under the terms of the Artistic License
 *   as published by Larry Wall, either version 2.0,
 *   or (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *   See the Artistic License for more details.
 *
 *   You should have received a copy of the Artistic License with this Kit,
 *   in the file named "Artistic.clarified".
 *   If not, I'll be glad to provide one.
 *
 **************************************************************/
package com.lemckes.MidiQuickFix.components;

import com.lemckes.MidiQuickFix.util.Formats;
import java.util.Hashtable;
import javax.swing.JLabel;

/**
 * A slider that represents a duration in either ticks or beats.
 */
public class TempoSlider extends javax.swing.JSlider
{

    static final long serialVersionUID = 6998631897922134763L;

    /** Creates new form DurationSlider */
    public TempoSlider() {
        initComponents();
        Hashtable<Integer, JLabel> labels = new Hashtable<>();
        for (float f = 0.5f; f < 1.0f; f += 0.1f) {
            JLabel label = new JLabel(Formats.formatNumber_1_1(f));
            label.setFont(getFont());
            labels.put(tempoToSlider(f), label);
        }
        for (float f = 1.0f; f <= 2.1f; f += 0.2f) {
            JLabel label = new JLabel(Formats.formatNumber_1_1(f));
            label.setFont(getFont());
            labels.put(tempoToSlider(f), label);
        }
        setLabelTable(labels);
    }

    public static float sliderToTempo(int val) {
        // the slider range is [0, 200]
        // convert the value to the range [-1.0, 1.0]
        float factor = (val - 100) / 100.0f;
        // convert from [-1.0, 1.0]
        // to [0.5, 2.0] (i.e. [2^-1.0, 2^1.0] )
        factor = (float)Math.pow(2.0, factor);
        return factor;
    }

    public static int tempoToSlider(float factor) {
        // convert from [0.5, 2.0] (i.e. [2^-1.0, 2^1.0] )
        // to [-1.0, 1.0]
        float tempo = (float)(Math.log(factor) / Math.log(2));
        // convert the value from the range [-1.0, 1.0]
        // to the slider range of [0, 200]
        int val = Math.round((tempo + 1) * 100);
        return val;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        setMaximum(200);
        setPaintLabels(true);
        setValue(100);
        setOpaque(false);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
